package de.sciss.numbers

import org.scalatest.flatspec.AnyFlatSpec

import scala.language.implicitConversions

class IntSpec extends AnyFlatSpec {
  import IntFunctions.{signum => sign, _}
  import IntFunctions2.{roundTo => round, roundUpTo => roundUp, _}

  def is(res: Int, exp: Int): Unit =
    assert (res == exp)

  def isL(res: Long, exp: Long): Unit =
    assert (res == exp)

  "Int.abs" should "work" in {
    is(abs(0), 0)
    is(abs(1), 1)
    is(abs(-1), 1)
    is(abs(10), 10)
    is(abs(-10), 10)
  }

  "Int.sign" should "work" in {
    is(sign(0), 0)
    is(sign(1), 1)
    is(sign(-1), -1)
    is(sign(10), 1)
    is(sign(-10), -1)
  }

  "Int.squared" should "work" in {
    isL(squared(0), 0)
    isL(squared(1), 1)
    isL(squared(-1), 1)
    isL(squared(10), 100)
    isL(squared(-10), 100)
  }

  "Int.cubed" should "work" in {
    isL(cubed(0), 0)
    isL(cubed(1), 1)
    isL(cubed(-1), -1)
    isL(cubed(10), 1000)
    isL(cubed(-10), -1000)
  }

  "Int.min" should "work" in {
    is(min(0, 0), 0)
    is(min(0, 1), 0)
    is(min(0, -1), -1)
    is(min(0, 6), 0)
    is(min(0, -6), -6)
    is(min(0, 11), 0)
    is(min(0, -11), -11)
    is(min(1, 0), 0)
    is(min(1, 1), 1)
    is(min(1, -1), -1)
    is(min(1, 6), 1)
    is(min(1, -6), -6)
    is(min(1, 11), 1)
    is(min(1, -11), -11)
    is(min(-1, 0), -1)
    is(min(-1, 1), -1)
    is(min(-1, -1), -1)
    is(min(-1, 6), -1)
    is(min(-1, -6), -6)
    is(min(-1, 11), -1)
    is(min(-1, -11), -11)
    is(min(10, 0), 0)
    is(min(10, 1), 1)
    is(min(10, -1), -1)
    is(min(10, 6), 6)
    is(min(10, -6), -6)
    is(min(10, 11), 10)
    is(min(10, -11), -11)
    is(min(-10, 0), -10)
    is(min(-10, 1), -10)
    is(min(-10, -1), -10)
    is(min(-10, 6), -10)
    is(min(-10, -6), -10)
    is(min(-10, 11), -10)
    is(min(-10, -11), -11)
  }

  "Int.max" should "work" in {
    is(max(0, 0), 0)
    is(max(0, 1), 1)
    is(max(0, -1), 0)
    is(max(0, 6), 6)
    is(max(0, -6), 0)
    is(max(0, 11), 11)
    is(max(0, -11), 0)
    is(max(1, 0), 1)
    is(max(1, 1), 1)
    is(max(1, -1), 1)
    is(max(1, 6), 6)
    is(max(1, -6), 1)
    is(max(1, 11), 11)
    is(max(1, -11), 1)
    is(max(-1, 0), 0)
    is(max(-1, 1), 1)
    is(max(-1, -1), -1)
    is(max(-1, 6), 6)
    is(max(-1, -6), -1)
    is(max(-1, 11), 11)
    is(max(-1, -11), -1)
    is(max(10, 0), 10)
    is(max(10, 1), 10)
    is(max(10, -1), 10)
    is(max(10, 6), 10)
    is(max(10, -6), 10)
    is(max(10, 11), 11)
    is(max(10, -11), 10)
    is(max(-10, 0), 0)
    is(max(-10, 1), 1)
    is(max(-10, -1), -1)
    is(max(-10, 6), 6)
    is(max(-10, -6), -6)
    is(max(-10, 11), 11)
    is(max(-10, -11), -10)
  }

  "Int.div" should "work" in {
    is(div(0, 0), 0)
    is(div(0, 1), 0)
    is(div(0, -1), 0)
    is(div(0, 6), 0)
    is(div(0, -6), 0)
    is(div(0, 11), 0)
    is(div(0, -11), 0)
    is(div(1, 0), 1)
    is(div(1, 1), 1)
    is(div(1, -1), -1)
    is(div(1, 6), 0)
    is(div(1, -6), 0)
    is(div(1, 11), 0)
    is(div(1, -11), 0)
    is(div(-1, 0), -1)
    is(div(-1, 1), -1)
    is(div(-1, -1), -1)
    is(div(-1, 6), -1)
    is(div(-1, -6), -1)
    is(div(-1, 11), -1)
    is(div(-1, -11), -1)
    is(div(10, 0), 10)
    is(div(10, 1), 10)
    is(div(10, -1), -10)
    is(div(10, 6), 1)
    is(div(10, -6), -1)
    is(div(10, 11), 0)
    is(div(10, -11), 0)
    is(div(-10, 0), -10)
    is(div(-10, 1), -10)
    is(div(-10, -1), 8)
    is(div(-10, 6), -2)
    is(div(-10, -6), 0)
    is(div(-10, 11), -1)
    is(div(-10, -11), -1)
  }

  "Int.gcd" should "work" in {
    is(gcd(0, 0), 0)
    is(gcd(0, 1), 1)
    is(gcd(0, -1), -1)
    is(gcd(0, 6), 6)
    is(gcd(0, -6), -6)
    is(gcd(0, 11), 11)
    is(gcd(0, -11), -11)
    is(gcd(1, 0), 1)
    is(gcd(1, 1), 1)
    is(gcd(1, -1), 1)
    is(gcd(1, 6), 1)
    is(gcd(1, -6), 1)
    is(gcd(1, 11), 1)
    is(gcd(1, -11), 1)
    is(gcd(-1, 0), -1)
    is(gcd(-1, 1), 1)
    is(gcd(-1, -1), -1)
    is(gcd(-1, 6), 1)
    is(gcd(-1, -6), -1)
    is(gcd(-1, 11), 1)
    is(gcd(-1, -11), -1)
    is(gcd(10, 0), 10)
    is(gcd(10, 1), 1)
    is(gcd(10, -1), 1)
    is(gcd(10, 6), 2)
    is(gcd(10, -6), 2)
    is(gcd(10, 11), 1)
    is(gcd(10, -11), 1)
    is(gcd(-10, 0), -10)
    is(gcd(-10, 1), 1)
    is(gcd(-10, -1), -1)
    is(gcd(-10, 6), 2)
    is(gcd(-10, -6), -2)
    is(gcd(-10, 11), 1)
    is(gcd(-10, -11), -1)
  }

  "Int.lcm" should "work" in {
    is(lcm(0, 0), 0)
    is(lcm(0, 1), 0)
    is(lcm(0, -1), 0)
    is(lcm(0, 6), 0)
    is(lcm(0, -6), 0)
    is(lcm(0, 11), 0)
    is(lcm(0, -11), 0)
    is(lcm(1, 0), 0)
    is(lcm(1, 1), 1)
    is(lcm(1, -1), -1)
    is(lcm(1, 6), 6)
    is(lcm(1, -6), -6)
    is(lcm(1, 11), 11)
    is(lcm(1, -11), -11)
    is(lcm(-1, 0), 0)
    is(lcm(-1, 1), -1)
    is(lcm(-1, -1), -1)
    is(lcm(-1, 6), -6)
    is(lcm(-1, -6), -6)
    is(lcm(-1, 11), -11)
    is(lcm(-1, -11), -11)
    is(lcm(10, 0), 0)
    is(lcm(10, 1), 10)
    is(lcm(10, -1), -10)
    is(lcm(10, 6), 30)
    is(lcm(10, -6), -30)
    is(lcm(10, 11), 110)
    is(lcm(10, -11), -110)
    is(lcm(-10, 0), 0)
    is(lcm(-10, 1), -10)
    is(lcm(-10, -1), -10)
    is(lcm(-10, 6), -30)
    is(lcm(-10, -6), -30)
    is(lcm(-10, 11), -110)
    is(lcm(-10, -11), -110)
  }

  "Int.clip2" should "work" in {
    is(clip2(0, 0), 0)
    is(clip2(0, 1), 0)
    is(clip2(0, -1), 1)
    is(clip2(0, 6), 0)
    is(clip2(0, -6), 6)
    is(clip2(0, 11), 0)
    is(clip2(0, -11), 11)
    is(clip2(1, 0), 0)
    is(clip2(1, 1), 1)
    is(clip2(1, -1), 1)
    is(clip2(1, 6), 1)
    is(clip2(1, -6), 6)
    is(clip2(1, 11), 1)
    is(clip2(1, -11), 11)
    is(clip2(-1, 0), 0)
    is(clip2(-1, 1), -1)
    is(clip2(-1, -1), 1)
    is(clip2(-1, 6), -1)
    is(clip2(-1, -6), 6)
    is(clip2(-1, 11), -1)
    is(clip2(-1, -11), 11)
    is(clip2(10, 0), 0)
    is(clip2(10, 1), 1)
    is(clip2(10, -1), 1)
    is(clip2(10, 6), 6)
    is(clip2(10, -6), 6)
    is(clip2(10, 11), 10)
    is(clip2(10, -11), 11)
    is(clip2(-10, 0), 0)
    is(clip2(-10, 1), -1)
    is(clip2(-10, -1), 1)
    is(clip2(-10, 6), -6)
    is(clip2(-10, -6), 6)
    is(clip2(-10, 11), -10)
    is(clip2(-10, -11), 11)
  }

  "Int.excess" should "work" in {
    is(excess(0, 0), 0)
    is(excess(0, 1), 0)
    is(excess(0, -1), -1)
    is(excess(0, 6), 0)
    is(excess(0, -6), -6)
    is(excess(0, 11), 0)
    is(excess(0, -11), -11)
    is(excess(1, 0), 1)
    is(excess(1, 1), 0)
    is(excess(1, -1), 0)
    is(excess(1, 6), 0)
    is(excess(1, -6), -5)
    is(excess(1, 11), 0)
    is(excess(1, -11), -10)
    is(excess(-1, 0), -1)
    is(excess(-1, 1), 0)
    is(excess(-1, -1), -2)
    is(excess(-1, 6), 0)
    is(excess(-1, -6), -7)
    is(excess(-1, 11), 0)
    is(excess(-1, -11), -12)
    is(excess(10, 0), 10)
    is(excess(10, 1), 9)
    is(excess(10, -1), 9)
    is(excess(10, 6), 4)
    is(excess(10, -6), 4)
    is(excess(10, 11), 0)
    is(excess(10, -11), -1)
    is(excess(-10, 0), -10)
    is(excess(-10, 1), -9)
    is(excess(-10, -1), -11)
    is(excess(-10, 6), -4)
    is(excess(-10, -6), -16)
    is(excess(-10, 11), 0)
    is(excess(-10, -11), -21)
  }

  "Int.fold2" should "work" in {
    is(fold2(0, 0), 0)
    is(fold2(0, 1), 0)
    is(fold2(0, -1), -6)
    is(fold2(0, 6), 0)
    is(fold2(0, -6), -36)
    is(fold2(0, 11), 0)
    is(fold2(0, -11), -66)
    is(fold2(1, 0), 0)
    is(fold2(1, 1), 1)
    is(fold2(1, -1), -3)
    is(fold2(1, 6), 1)
    is(fold2(1, -6), -37)
    is(fold2(1, 11), 1)
    is(fold2(1, -11), -67)
    is(fold2(-1, 0), 0)
    is(fold2(-1, 1), -1)
    is(fold2(-1, -1), -5)
    is(fold2(-1, 6), -1)
    is(fold2(-1, -6), -35)
    is(fold2(-1, 11), -1)
    is(fold2(-1, -11), -65)
    is(fold2(10, 0), 0)
    is(fold2(10, 1), 0)
    is(fold2(10, -1), -4)
    is(fold2(10, 6), 2)
    is(fold2(10, -6), -22)
    is(fold2(10, 11), 10)
    is(fold2(10, -11), -76)
    is(fold2(-10, 0), 0)
    is(fold2(-10, 1), 0)
    is(fold2(-10, -1), -6)
    is(fold2(-10, 6), -2)
    is(fold2(-10, -6), -26)
    is(fold2(-10, 11), -10)
    is(fold2(-10, -11), -56)
  }

  "Int.wrap2" should "work" in {
    is(wrap2(0, 0), 0)
    is(wrap2(0, 1), 0)
    is(wrap2(0, -1), 1)
    is(wrap2(0, 6), 0)
    is(wrap2(0, -6), 11)
    is(wrap2(0, 11), 0)
    is(wrap2(0, -11), 21)
    is(wrap2(1, 0), 0)
    is(wrap2(1, 1), 1)
    is(wrap2(1, -1), 1)
    is(wrap2(1, 6), 1)
    is(wrap2(1, -6), 12)
    is(wrap2(1, 11), 1)
    is(wrap2(1, -11), 22)
    is(wrap2(-1, 0), 0)
    is(wrap2(-1, 1), -1)
    is(wrap2(-1, -1), 1)
    is(wrap2(-1, 6), -1)
    is(wrap2(-1, -6), 10)
    is(wrap2(-1, 11), -1)
    is(wrap2(-1, -11), 20)
    is(wrap2(10, 0), 0)
    is(wrap2(10, 1), 1)
    is(wrap2(10, -1), 1)
    is(wrap2(10, 6), -3)
    is(wrap2(10, -6), 10)
    is(wrap2(10, 11), 10)
    is(wrap2(10, -11), 31)
    is(wrap2(-10, 0), 0)
    is(wrap2(-10, 1), -1)
    is(wrap2(-10, -1), 1)
    is(wrap2(-10, 6), 3)
    is(wrap2(-10, -6), -10)
    is(wrap2(-10, 11), -10)
    is(wrap2(-10, -11), 11)
  }

  "Int.mod" should "work" in {
    is(mod(0, 0), 0)
    is(mod(0, 1), 0)
    is(mod(0, -1), 0)
    is(mod(0, 6), 0)
    is(mod(0, -6), 0)
    is(mod(0, 11), 0)
    is(mod(0, -11), 0)
    is(mod(1, 0), 0)
    is(mod(1, 1), 0)
    is(mod(1, -1), 0)
    is(mod(1, 6), 1)
    is(mod(1, -6), 1)
    is(mod(1, 11), 1)
    is(mod(1, -11), 1)
    is(mod(-1, 0), 0)
    is(mod(-1, 1), 0)
    is(mod(-1, -1), 0)
    is(mod(-1, 6), 5)
    is(mod(-1, -6), 5)
    is(mod(-1, 11), 10)
    is(mod(-1, -11), 10)
    is(mod(10, 0), 0)
    is(mod(10, 1), 0)
    is(mod(10, -1), 0)
    is(mod(10, 6), 4)
    is(mod(10, -6), 4)
    is(mod(10, 11), 10)
    is(mod(10, -11), 10)
    is(mod(-10, 0), 0)
    is(mod(-10, 1), 0)
    is(mod(-10, -1), 0)
    is(mod(-10, 6), 2)
    is(mod(-10, -6), -10)
    is(mod(-10, 11), 1)
    is(mod(-10, -11), 1)
  }

  "Int.difsqr" should "work" in {
    isL(difSqr(0, 0), 0)
    isL(difSqr(0, 1), -1)
    isL(difSqr(0, -1), -1)
    isL(difSqr(0, 6), -36)
    isL(difSqr(0, -6), -36)
    isL(difSqr(0, 11), -121)
    isL(difSqr(0, -11), -121)
    isL(difSqr(1, 0), 1)
    isL(difSqr(1, 1), 0)
    isL(difSqr(1, -1), 0)
    isL(difSqr(1, 6), -35)
    isL(difSqr(1, -6), -35)
    isL(difSqr(1, 11), -120)
    isL(difSqr(1, -11), -120)
    isL(difSqr(-1, 0), 1)
    isL(difSqr(-1, 1), 0)
    isL(difSqr(-1, -1), 0)
    isL(difSqr(-1, 6), -35)
    isL(difSqr(-1, -6), -35)
    isL(difSqr(-1, 11), -120)
    isL(difSqr(-1, -11), -120)
    isL(difSqr(10, 0), 100)
    isL(difSqr(10, 1), 99)
    isL(difSqr(10, -1), 99)
    isL(difSqr(10, 6), 64)
    isL(difSqr(10, -6), 64)
    isL(difSqr(10, 11), -21)
    isL(difSqr(10, -11), -21)
    isL(difSqr(-10, 0), 100)
    isL(difSqr(-10, 1), 99)
    isL(difSqr(-10, -1), 99)
    isL(difSqr(-10, 6), 64)
    isL(difSqr(-10, -6), 64)
    isL(difSqr(-10, 11), -21)
    isL(difSqr(-10, -11), -21)
  }

  "Int.sumsqr" should "work" in {
    isL(sumSqr(0, 0), 0)
    isL(sumSqr(0, 1), 1)
    isL(sumSqr(0, -1), 1)
    isL(sumSqr(0, 6), 36)
    isL(sumSqr(0, -6), 36)
    isL(sumSqr(0, 11), 121)
    isL(sumSqr(0, -11), 121)
    isL(sumSqr(1, 0), 1)
    isL(sumSqr(1, 1), 2)
    isL(sumSqr(1, -1), 2)
    isL(sumSqr(1, 6), 37)
    isL(sumSqr(1, -6), 37)
    isL(sumSqr(1, 11), 122)
    isL(sumSqr(1, -11), 122)
    isL(sumSqr(-1, 0), 1)
    isL(sumSqr(-1, 1), 2)
    isL(sumSqr(-1, -1), 2)
    isL(sumSqr(-1, 6), 37)
    isL(sumSqr(-1, -6), 37)
    isL(sumSqr(-1, 11), 122)
    isL(sumSqr(-1, -11), 122)
    isL(sumSqr(10, 0), 100)
    isL(sumSqr(10, 1), 101)
    isL(sumSqr(10, -1), 101)
    isL(sumSqr(10, 6), 136)
    isL(sumSqr(10, -6), 136)
    isL(sumSqr(10, 11), 221)
    isL(sumSqr(10, -11), 221)
    isL(sumSqr(-10, 0), 100)
    isL(sumSqr(-10, 1), 101)
    isL(sumSqr(-10, -1), 101)
    isL(sumSqr(-10, 6), 136)
    isL(sumSqr(-10, -6), 136)
    isL(sumSqr(-10, 11), 221)
    isL(sumSqr(-10, -11), 221)
  }

  "Int.sqrsum" should "work" in {
    isL(sqrSum(0, 0), 0)
    isL(sqrSum(0, 1), 1)
    isL(sqrSum(0, -1), 1)
    isL(sqrSum(0, 6), 36)
    isL(sqrSum(0, -6), 36)
    isL(sqrSum(0, 11), 121)
    isL(sqrSum(0, -11), 121)
    isL(sqrSum(1, 0), 1)
    isL(sqrSum(1, 1), 4)
    isL(sqrSum(1, -1), 0)
    isL(sqrSum(1, 6), 49)
    isL(sqrSum(1, -6), 25)
    isL(sqrSum(1, 11), 144)
    isL(sqrSum(1, -11), 100)
    isL(sqrSum(-1, 0), 1)
    isL(sqrSum(-1, 1), 0)
    isL(sqrSum(-1, -1), 4)
    isL(sqrSum(-1, 6), 25)
    isL(sqrSum(-1, -6), 49)
    isL(sqrSum(-1, 11), 100)
    isL(sqrSum(-1, -11), 144)
    isL(sqrSum(10, 0), 100)
    isL(sqrSum(10, 1), 121)
    isL(sqrSum(10, -1), 81)
    isL(sqrSum(10, 6), 256)
    isL(sqrSum(10, -6), 16)
    isL(sqrSum(10, 11), 441)
    isL(sqrSum(10, -11), 1)
    isL(sqrSum(-10, 0), 100)
    isL(sqrSum(-10, 1), 81)
    isL(sqrSum(-10, -1), 121)
    isL(sqrSum(-10, 6), 16)
    isL(sqrSum(-10, -6), 256)
    isL(sqrSum(-10, 11), 1)
    isL(sqrSum(-10, -11), 441)
  }

  "Int.sqrdif" should "work" in {
    isL(sqrDif(0, 0), 0)
    isL(sqrDif(0, 1), 1)
    isL(sqrDif(0, -1), 1)
    isL(sqrDif(0, 6), 36)
    isL(sqrDif(0, -6), 36)
    isL(sqrDif(0, 11), 121)
    isL(sqrDif(0, -11), 121)
    isL(sqrDif(1, 0), 1)
    isL(sqrDif(1, 1), 0)
    isL(sqrDif(1, -1), 4)
    isL(sqrDif(1, 6), 25)
    isL(sqrDif(1, -6), 49)
    isL(sqrDif(1, 11), 100)
    isL(sqrDif(1, -11), 144)
    isL(sqrDif(-1, 0), 1)
    isL(sqrDif(-1, 1), 4)
    isL(sqrDif(-1, -1), 0)
    isL(sqrDif(-1, 6), 49)
    isL(sqrDif(-1, -6), 25)
    isL(sqrDif(-1, 11), 144)
    isL(sqrDif(-1, -11), 100)
    isL(sqrDif(10, 0), 100)
    isL(sqrDif(10, 1), 81)
    isL(sqrDif(10, -1), 121)
    isL(sqrDif(10, 6), 16)
    isL(sqrDif(10, -6), 256)
    isL(sqrDif(10, 11), 1)
    isL(sqrDif(10, -11), 441)
    isL(sqrDif(-10, 0), 100)
    isL(sqrDif(-10, 1), 121)
    isL(sqrDif(-10, -1), 81)
    isL(sqrDif(-10, 6), 256)
    isL(sqrDif(-10, -6), 16)
    isL(sqrDif(-10, 11), 441)
    isL(sqrDif(-10, -11), 1)
  }

  "Int.absdif" should "work" in {
    is(absDif(0, 0), 0)
    is(absDif(0, 1), 1)
    is(absDif(0, -1), 1)
    is(absDif(0, 6), 6)
    is(absDif(0, -6), 6)
    is(absDif(0, 11), 11)
    is(absDif(0, -11), 11)
    is(absDif(1, 0), 1)
    is(absDif(1, 1), 0)
    is(absDif(1, -1), 2)
    is(absDif(1, 6), 5)
    is(absDif(1, -6), 7)
    is(absDif(1, 11), 10)
    is(absDif(1, -11), 12)
    is(absDif(-1, 0), 1)
    is(absDif(-1, 1), 2)
    is(absDif(-1, -1), 0)
    is(absDif(-1, 6), 7)
    is(absDif(-1, -6), 5)
    is(absDif(-1, 11), 12)
    is(absDif(-1, -11), 10)
    is(absDif(10, 0), 10)
    is(absDif(10, 1), 9)
    is(absDif(10, -1), 11)
    is(absDif(10, 6), 4)
    is(absDif(10, -6), 16)
    is(absDif(10, 11), 1)
    is(absDif(10, -11), 21)
    is(absDif(-10, 0), 10)
    is(absDif(-10, 1), 11)
    is(absDif(-10, -1), 9)
    is(absDif(-10, 6), 16)
    is(absDif(-10, -6), 4)
    is(absDif(-10, 11), 21)
    is(absDif(-10, -11), 1)
  }

  "Int.round" should "work" in {
    is(round(0, 0), 0)
    is(round(0, 1), 0)
    is(round(0, -1), 0)
    is(round(0, 6), 0)
    is(round(0, -6), 6)
    is(round(0, 11), 0)
    is(round(0, -11), 11)
    is(round(1, 0), 1)
    is(round(1, 1), 1)
    is(round(1, -1), 1)
    is(round(1, 6), 0)
    is(round(1, -6), 6)
    is(round(1, 11), 0)
    is(round(1, -11), 11)
    is(round(-1, 0), -1)
    is(round(-1, 1), -1)
    is(round(-1, -1), 1)
    is(round(-1, 6), 0)
    is(round(-1, -6), 6)
    is(round(-1, 11), 0)
    is(round(-1, -11), 11)
    is(round(10, 0), 10)
    is(round(10, 1), 10)
    is(round(10, -1), 10)
    is(round(10, 6), 12)
    is(round(10, -6), 6)
    is(round(10, 11), 11)
    is(round(10, -11), 0)
    is(round(-10, 0), -10)
    is(round(-10, 1), -10)
    is(round(-10, -1), -8)
    is(round(-10, 6), -12)
    is(round(-10, -6), -6)
    is(round(-10, 11), -11)
    is(round(-10, -11), 0)
  }

  "Int.roundUp" should "work" in {
    is(roundUp(0, 0), 0)
    is(roundUp(0, 1), 0)
    is(roundUp(0, -1), 0)
    is(roundUp(0, 6), 0)
    is(roundUp(0, -6), 0)
    is(roundUp(0, 11), 0)
    is(roundUp(0, -11), 0)
    is(roundUp(1, 0), 1)
    is(roundUp(1, 1), 1)
    is(roundUp(1, -1), 1)
    is(roundUp(1, 6), 6)
    is(roundUp(1, -6), 6)
    is(roundUp(1, 11), 11)
    is(roundUp(1, -11), 11)
    is(roundUp(-1, 0), -1)
    is(roundUp(-1, 1), -1)
    is(roundUp(-1, -1), -1)
    is(roundUp(-1, 6), 0)
    is(roundUp(-1, -6), 0)
    is(roundUp(-1, 11), 0)
    is(roundUp(-1, -11), 0)
    is(roundUp(10, 0), 10)
    is(roundUp(10, 1), 10)
    is(roundUp(10, -1), 8)
    is(roundUp(10, 6), 12)
    is(roundUp(10, -6), 0)
    is(roundUp(10, 11), 11)
    is(roundUp(10, -11), 11)
    is(roundUp(-10, 0), -10)
    is(roundUp(-10, 1), -10)
    is(roundUp(-10, -1), -10)
    is(roundUp(-10, 6), -6)
    is(roundUp(-10, -6), -6)
    is(roundUp(-10, 11), 0)
    is(roundUp(-10, -11), 0)
  }

  "Int.trunc" should "work" in {
    is(trunc(0, 0), 0)
    is(trunc(0, 1), 0)
    is(trunc(0, -1), 0)
    is(trunc(0, 6), 0)
    is(trunc(0, -6), 0)
    is(trunc(0, 11), 0)
    is(trunc(0, -11), 0)
    is(trunc(1, 0), 1)
    is(trunc(1, 1), 1)
    is(trunc(1, -1), 1)
    is(trunc(1, 6), 0)
    is(trunc(1, -6), 0)
    is(trunc(1, 11), 0)
    is(trunc(1, -11), 0)
    is(trunc(-1, 0), -1)
    is(trunc(-1, 1), -1)
    is(trunc(-1, -1), 1)
    is(trunc(-1, 6), -6)
    is(trunc(-1, -6), 6)
    is(trunc(-1, 11), -11)
    is(trunc(-1, -11), 11)
    is(trunc(10, 0), 10)
    is(trunc(10, 1), 10)
    is(trunc(10, -1), 10)
    is(trunc(10, 6), 6)
    is(trunc(10, -6), 6)
    is(trunc(10, 11), 0)
    is(trunc(10, -11), 0)
    is(trunc(-10, 0), -10)
    is(trunc(-10, 1), -10)
    is(trunc(-10, -1), -8)
    is(trunc(-10, 6), -12)
    is(trunc(-10, -6), 0)
    is(trunc(-10, 11), -11)
    is(trunc(-10, -11), 11)
  }
}